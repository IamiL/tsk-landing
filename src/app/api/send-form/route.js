// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
const TELEGRAM_BOT_TOKEN = '7522766003:AAH0ULTi1GsY12mXr8Qm3wc9n4DJd7TYf5s'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = '-4868703702'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({message: 'Method not allowed'});
    }

    try {
        const formData = req.body;

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        const message = formatFormDataForTelegram(formData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            }),
        });

        if (!telegramResponse.ok) {
            throw new Error('Failed to send message to Telegram');
        }

        res.status(200).json({message: 'Form submitted successfully'});
    } catch (error) {
        console.error('Error sending form:', error);
        res.status(500).json({message: 'Internal server error'});
    }
}

function formatFormDataForTelegram(data) {
    const {
        checkboxes,
        objectAddress,
        requestDeadline,
        position,
        fullName,
        phone,
        email,
        city,
        organization,
        message
    } = data;

    let telegramMessage = '<b>üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>\n\n';

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞
    telegramMessage += '<b>üìã –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê –û–ë–™–ï–ö–¢–ê</b>\n';

    if (checkboxes['1']) {
        const purposes = [];
        if (checkboxes['1'].option1) purposes.push('–∑–∞–≤–æ–¥');
        if (checkboxes['1'].option2) purposes.push('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ');
        if (checkboxes['1'].option3) purposes.push('—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç');
        if (checkboxes['1'].option4) purposes.push('–ø—Ä–æ—á–µ–µ');
        if (purposes.length > 0) {
            telegramMessage += `–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${purposes.join(', ')}\n`;
        }
    }

    if (objectAddress) {
        telegramMessage += `–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞: ${objectAddress}\n`;
    }

    if (checkboxes['2']) {
        const ownership = [];
        if (checkboxes['2'].option1) ownership.push('–≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏');
        if (checkboxes['2'].option2) ownership.push('–≤ –∞—Ä–µ–Ω–¥–µ');
        if (ownership.length > 0) {
            telegramMessage += `–û–±—ä–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è: ${ownership.join(', ')}\n`;
        }
    }

    if (checkboxes['3']) {
        const objectType = [];
        if (checkboxes['3'].option1) objectType.push('–æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä—É–ø–ø–µ –∫–æ–º–ø–∞–Ω–∏–π');
        if (checkboxes['3'].option2) objectType.push('—è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–º');
        if (objectType.length > 0) {
            telegramMessage += `–û–±—ä–µ–∫—Ç: ${objectType.join(', ')}\n`;
        }
    }

    // –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞
    telegramMessage += '\n<b>üéØ –ü–û–¢–†–ï–ë–ù–û–°–¢–¨ –ó–ê–ö–ê–ó–ß–ò–ö–ê</b>\n';

    if (checkboxes['4']) {
        const requests = [];
        if (checkboxes['4'].option1) requests.push('—Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∂–∞—Ä–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–æ–∂–∞—Ä–µ');
        if (checkboxes['4'].option2) requests.push('—Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º');
        if (checkboxes['4'].option3) requests.push('—Å–∏—Å—Ç–µ–º–∞ –æ—Ö—Ä–∞–Ω—ã –ø–µ—Ä–∏–º–µ—Ç—Ä–∞');
        if (checkboxes['4'].option4) requests.push('—Å–∏—Å—Ç–µ–º–∞ –æ—Ö—Ä–∞–Ω–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏');
        if (checkboxes['4'].option5) requests.push('–ø—Ä–æ—á–µ–µ');
        if (requests.length > 0) {
            telegramMessage += `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: ${requests.join(', ')}\n`;
        }
    }

    if (checkboxes['5']) {
        const basis = [];
        if (checkboxes['5'].option1) basis.push('–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–¥–∑–æ—Ä–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤');
        if (checkboxes['5'].option2) basis.push('—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞');
        if (checkboxes['5'].option3) basis.push('–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã');
        if (checkboxes['5'].option4) basis.push('–ø—Ä–æ—á–µ–µ');
        if (basis.length > 0) {
            telegramMessage += `–û—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ${basis.join(', ')}\n`;
        }
    }

    // –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
    telegramMessage += '\n<b>üìä –û–¢–í–ï–¢ –ù–ê –ó–ê–ü–†–û–°</b>\n';

    if (checkboxes['6']) {
        const expectedResult = [];
        if (checkboxes['6'].option1) expectedResult.push('–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞');
        if (checkboxes['6'].option2) expectedResult.push('–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏');
        if (checkboxes['6'].option3) expectedResult.push('–ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        if (checkboxes['6'].option4) expectedResult.push('–ø—Ä–æ—á–µ–µ');
        if (expectedResult.length > 0) {
            telegramMessage += `–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${expectedResult.join(', ')}\n`;
        }
    }

    if (requestDeadline) {
        telegramMessage += `–°—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${requestDeadline}\n`;
    }

    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    telegramMessage += '\n<b>üë§ –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n';

    if (checkboxes['7']) {
        const source = [];
        if (checkboxes['7'].option1) source.push('–∏–Ω—Ç–µ—Ä–Ω–µ—Ç');
        if (checkboxes['7'].option2) source.push('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
        if (checkboxes['7'].option3) source.push('–ø—Ä–æ—á–µ–µ');
        if (source.length > 0) {
            telegramMessage += `–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏: ${source.join(', ')}\n`;
        }
    }

    if (position) telegramMessage += `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${position}\n`;
    if (fullName) telegramMessage += `–§–ò–û: ${fullName}\n`;
    if (phone) telegramMessage += `–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n`;
    if (email) telegramMessage += `E-mail: ${email}\n`;
    if (city) telegramMessage += `–ì–æ—Ä–æ–¥: ${city}\n`;
    if (organization) telegramMessage += `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${organization}\n`;
    if (message) telegramMessage += `–°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n`;

    return telegramMessage;
}

// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ App Router (app/api/send-form/route.js), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:

export async function POST(request) {
    try {
        const formData = await request.json();

        const message = formatFormDataForTelegram(formData);

        const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            }),
        });

        if (!telegramResponse.ok) {
            throw new Error('Failed to send message to Telegram');
        }

        return Response.json({message: 'Form submitted successfully'});
    } catch (error) {
        console.error('Error sending form:', error);
        return Response.json({message: 'Internal server error'}, {status: 500});
    }
}
